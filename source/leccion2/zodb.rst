.. _python_modulo_zodb:

ZODB
====

La `ZODB`_ es una base de datos de objetos. Hace que sea muy f√°cil almacenar diferentes tipos
de datos de contenido en un gr√°fico, lo que admite subclases (algo que SQL a menudo hace mal).

Dado que la base de datos almacena objetos y los objetos est√°n definidos en c√≥digo Python,
siempre necesitar√° el c√≥digo fuente Python correspondiente para crear instancias de los objetos
almacenados dentro de ZODB. Esto puede parecer inc√≥modo al principio, pero necesita tener MySQL
ejecut√°ndose para leer lo que hay dentro de los archivos MySQL almacenados en su disco, etc.

.. warning::
    La base de datos ZODB no se puede utilizar sin el c√≥digo fuente de Python utilizado para crear
    los datos. Los datos no se pueden leer con ninguna herramienta basada en SQL y existen peque√±as
    herramientas para manejar los datos sin procesar.


``ZODB`` ofrece una base de datos orientada a objetos para Python que proporciona un alto grado de transparencia.

- ‚úÖ No hay lenguaje separado para las operaciones de base de datos

- ‚úÖ Muy poco impacto en su c√≥digo para hacer objetos persistentes

- ‚úÖ Ning√∫n mapeador de base de datos que oculte parcialmente la base de datos.

- ‚úÖ Utilizar un mapeo objeto-relacional no es como utilizar una base de datos orientada a objetos.

- ‚úÖ Casi ninguna costura entre el c√≥digo y la base de datos.

- ‚úÖ Las relaciones entre objetos se gestionan de forma muy natural, lo que permite crear grafos de objetos complejos sin uniones.

.. figure:: ../_static/images/zodb_logo.png
    :align: center
    :width: 100%

    Logotipo de ZODB

``ZODB`` es una base de datos transaccional ACID.

``ZODB`` funciona con Python 3.7 y versiones superiores. Tambi√©n funciona con PyPy.


üìå **Ventajas de ZODB**:

- ‚úÖ F√°cil de usar, sin necesidad de instalar bases de datos.

- ‚úÖ √ötil para almacenar estructuras de datos complejas (listas, diccionarios, objetos).

üìå **Desventajas**:

- ‚ùå No es ideal para grandes vol√∫menes de datos.

- ‚ùå No permite consultas avanzadas como SQL.


----


¬øQu√© es la ZODB?
-----------------

``ZODB`` es un sistema de persistencia para objetos Python.  Los lenguajes de programaci√≥n
que escriben objetos autom√°ticamente en el disco y los vuelven a leer cuando son requeridos
por un programa en ejecuci√≥n.  Al instalar el ``ZODB``, a√±ades estas facilidades a Python.

Es ciertamente posible construir tu propio sistema para hacer persistentes los objetos Python.
Los puntos de partida habituales son el m√≥dulo :mod:`pickle`, para convertir objetos en una
representaci√≥n de cadena, y varios m√≥dulos de bases de datos, como los m√≥dulos :mod:`gdbm` o
:mod:`bsddb`, que proporcionan formas de escribir cadenas en el disco y leerlas de vuelta.
Es sencillo combinar el m√≥dulo :mod:`pickle` y un m√≥dulo de base de datos para almacenar y
recuperar objetos, y de hecho el m√≥dulo :mod:`shelve`, incluido en la biblioteca est√°ndar
de Python, lo hace.

El inconveniente es que el programador tiene que gestionar expl√≠citamente los objetos, leyendo
un objeto cuando se necesita y escribi√©ndolo en el disco cuando el objeto ya no es necesario.
La ``ZODB`` gestiona los objetos por ti, manteni√©ndolos en una cach√©, escribi√©ndolos en disco cuando
se modifican y elimin√°ndolos de la cach√© si no se han utilizado durante un tiempo.


----


OODBs vs. BD relacionales
^^^^^^^^^^^^^^^^^^^^^^^^^

Otra forma de verlo es que ZODB es una base de datos orientada a objetos (OODB) espec√≠fica
de Python. Las bases de datos de objetos comerciales para C++ o Java a menudo exigen pasar
por el aro, como utilizar un preprocesador especial o evitar determinados tipos de datos.
Como veremos, el ``ZODB`` tiene que pasar por algunos obst√°culos, pero en comparaci√≥n, la
naturalidad del ``ZODB`` es asombrosa.

Las bases de datos relacionales (RDB) son mucho m√°s comunes que las OODB. Las bases de
datos relacionales almacenan la informaci√≥n en tablas; una tabla consta de cualquier
n√∫mero de filas, cada una de las cuales contiene varias columnas de informaci√≥n. (Las
filas se denominan m√°s formalmente relaciones, de donde procede el t√©rmino "base de
datos relacional").

Veamos un ejemplo concreto. El ejemplo procede de mi trabajo diario en la Bolsa de MEMS,
en una versi√≥n muy simplificada. El trabajo consiste en hacer un seguimiento de los procesos,
que son listas de pasos de fabricaci√≥n que deben realizarse en una f√°brica de semiconductores.
Una ejecuci√≥n pertenece a un usuario concreto, y tiene un nombre y un n√∫mero de identificaci√≥n
asignados. Las ejecuciones constan de una serie de operaciones; una operaci√≥n es un √∫nico paso
a realizar, como depositar algo en una oblea o grabar algo en ella.

Las operaciones pueden tener par√°metros, que son informaci√≥n adicional necesaria para realizar
una operaci√≥n. Por ejemplo, si vas a depositar algo en una oblea, necesitas saber dos cosas:
1) qu√© est√°s depositando, y 2) cu√°nto debe depositarse. Puede depositar 100 micras de √≥xido
2) de silicio o 1 micra de cobre.

El traslado de estas estructuras a una base de datos relacional es sencillo:

::

   CREATE TABLE runs (
     int      run_id,
     varchar  owner,
     varchar  title,
     int      acct_num,
     primary key(run_id)
   );

   CREATE TABLE operations (
     int      run_id,
     int      step_num,
     varchar  process_id,
     PRIMARY KEY(run_id, step_num),
     FOREIGN KEY(run_id) REFERENCES runs(run_id),
   );

   CREATE TABLE parameters (
     int      run_id,
     int      step_num,
     varchar  param_name,
     varchar  param_value,
     PRIMARY KEY(run_id, step_num, param_name)
     FOREIGN KEY(run_id, step_num)
        REFERENCES operations(run_id, step_num),
   );

En Python, escribir√≠a tres clases llamadas :class:`Run`, :class:`Operation`, y :class:`Parameter`.
No presentar√© c√≥digo para definir estas clases, ya que ese c√≥digo carece de inter√©s en este momento.
Cada clase contendr√≠a un √∫nico m√©todo para empezar, un m√©todo :meth:`__init__` que asigna valores
por defecto, como 0 o ``None``, a cada atributo de la clase.

No es dif√≠cil escribir c√≥digo Python que cree una instancia :class:`Run` y la rellene con los datos
de las tablas relacionales; con un poco m√°s de esfuerzo, se puede construir una herramienta sencilla,
normalmente llamada mapeador objeto-relacional, para hacerlo autom√°ticamente.

(V√©ase `<https://legacy.python.org/workshops/1997-10/proceedings/shprentz.html>`_
para la implementaci√≥n m√°s exitosa de Joel Shprentz, el sistema de Shprentz se ha utilizado para trabajo real).

Sin embargo, es dif√≠cil hacer que un mapeador objeto-relacional sea razonablemente r√°pido; una
implementaci√≥n simplona como la m√≠a es bastante lenta porque tiene que hacer varias consultas
para acceder a todos los datos de un objeto. Los mapeadores objeto-relacionales de mayor
rendimiento almacenan en cach√© los objetos para mejorar el rendimiento, y s√≥lo realizan
consultas SQL cuando realmente lo necesitan.

Eso ayuda si quieres acceder al n√∫mero de ejecuci√≥n 123 de repente. Pero, ¬øqu√© ocurre si desea
encontrar todas las ejecuciones en las que un paso tiene un par√°metro denominado "grosor" con
un valor de 2.0?  En la versi√≥n relacional, tiene dos opciones poco atractivas:

#. Escriba una consulta SQL especializada para este caso: ``SELECT run_id FROM operations
   WHERE param_name = 'thickness' AND param_value = 2.0``

   Si este tipo de consultas son habituales, puede acabar teniendo muchas consultas especializadas.
   Cuando se reorganicen las tablas de la base de datos, habr√° que modificar todas estas consultas.

#. Un mapeador objeto-relacional no ayuda mucho. Escanear a trav√©s de las ejecuciones significa que
   el mapeador realizar√° las consultas SQL necesarias para leer la ejecuci√≥n n¬∫ 1, y luego un simple
   bucle de Python puede comprobar si alguno de sus pasos tiene el par√°metro que est√°s buscando.
   Repite para la carrera #2, 3, y as√≠ sucesivamente. Esto hace un gran n√∫mero de consultas SQL, y
   por lo tanto es incre√≠blemente lento.

Una base de datos de objetos como ``ZODB`` simplemente almacena punteros internos de objeto a objeto, por
lo que leer un solo objeto es mucho m√°s r√°pido que hacer un mont√≥n de consultas SQL y ensamblar los
resultados. Por lo tanto, escanear todas las ejecuciones sigue siendo ineficiente, pero no extremadamente
ineficiente.


¬øQu√© es ZEO?
^^^^^^^^^^^^^

``ZODB`` incluye varias clases diferentes que implementan la interfaz :class:`Storage`. Tales clases
manejan el trabajo de escribir objetos Python a un medio de almacenamiento f√≠sico, que puede ser
un archivo de disco (la clase :class:`FileStorage`), un archivo BerkeleyDB (:class:`BDBFullStorage`),
una base de datos relacional (:class:`DCOracleStorage`), o alg√∫n otro medio. `ZEO`_ a√±ade :class:`ClientStorage`,
una nueva :class:`Storage` que no escribe en soportes f√≠sicos, sino que simplemente reenv√≠a todas
las peticiones a trav√©s de una red a un servidor.

El servidor, que est√° ejecutando una instancia de la clase :class:`StorageServer`, simplemente act√∫a
como un front-end para alguna clase f√≠sica :class:`Storage`. Es una idea bastante simple, pero como
veremos m√°s adelante en este documento, abre muchas posibilidades.


----


.. _python_pkg_zodb_instalar:

Instalaci√≥n
-----------

Para conectarte a una ``ZODB`` necesita el paquete `ZODB`_. Esto
significa que debe instalar ``ZODB`` ejecutando el siguiente comando, el cual
a continuaci√≥n se presentan el correspondiente comando de tu sistema operativo:

.. tabs::

   .. group-tab:: Linux

      .. code-block:: console

          pip3 install ZODB==6.0

   .. group-tab:: Windows

      .. code-block:: console

          pip3 install ZODB==6.0

Puede probar si la instalaci√≥n se realizo correctamente, ejecutando
el siguiente comando correspondiente a tu sistema operativo:

.. tabs::

   .. group-tab:: Linux

      .. code-block:: console

          python3 -c "import ZODB ; print(ZODB.__package__)"

   .. group-tab:: Windows

      .. code-block:: console

          python3 -c "import ZODB ; print(ZODB.__package__)"


Si muestra el nombre del paquete ``ZODB`` en la terminal, tiene
correctamente instalada la paquete. Con esto, ya tiene todo listo para continuar.

Adicionalmente puedes instalar un cliente de base de datos ZODB, a continuaci√≥n se
presentan alternativas:

ZODB browser
^^^^^^^^^^^^

El ZODB browser le permite inspeccionar objetos persistentes almacenados en ZODB,
ver sus atributos y los cambios hist√≥ricos realizados en ellos.

Es un paquete de herramientas de l√≠nea de comandos para administrar archivos
de base de datos ZODB, incluido el programa :command:`zodbbrowser.exe` para la
shell de l√≠nea de comandos.

Para instalar el administrador de base de datos ZODB ``ZODB browser`` de
forma nativa para sistemas operativos Linux y Windows, a continuaci√≥n se presentan
los modos de instalaci√≥n:

.. tabs::

   .. group-tab:: Linux

      .. code-block:: console

          pip install zodbbrowser==0.17.1

   .. group-tab:: Windows

      .. code-block:: console

          pip install zodbbrowser==0.17.1

Puede probar si la instalaci√≥n se realizo correctamente, ejecutando
el siguiente comando:


.. tabs::

   .. group-tab:: Linux

      Puede probar si la instalaci√≥n se realizo correctamente, ejecutando
      el siguiente comando:

      .. code-block:: console

          zodbbrowser --help

      Si ejecuto el comando anterior, este da como resultado lo siguiente:

      .. code-block:: console
          :class: no-copy

          Usage: zodbbrowser [options] [FILENAME | --zeo ADDRESS]

          Open a ZODB database and start a web-based browser app.

          Options:
            -h, --help        show this help message and exit
            --zeo=ADDRESS     connect to ZEO server instead (host:port or socket name)
            --storage=NAME    connect to given ZEO storage
            --listen=ADDRESS  specify port (or host:port) to listen on
            -q, --quiet       be quiet
            --debug           enable debug logging
            --rw              open the database read-write (default: read-only)

      Si tiene disponibles el comando ``zodbbrowser``, tiene correctamente instalada el cliente
      de base de datos nativa ``ZODB`` por linea de comando.

      .. note::

        M√°s informaci√≥n consulte https://pypi.org/project/zodbbrowser/

   .. group-tab:: Windows

      Puede probar si la instalaci√≥n se realizo correctamente, ejecutando
      el siguiente comando:

      .. code-block:: console

          zodbbrowser.exe --help

      Si ejecuto el comando anterior, este da como resultado lo siguiente:

      .. code-block:: console
          :class: no-copy

          Usage: zodbbrowser [options] [FILENAME | --zeo ADDRESS]

          Open a ZODB database and start a web-based browser app.

          Options:
            -h, --help        show this help message and exit
            --zeo=ADDRESS     connect to ZEO server instead (host:port or socket name)
            --storage=NAME    connect to given ZEO storage
            --listen=ADDRESS  specify port (or host:port) to listen on
            -q, --quiet       be quiet
            --debug           enable debug logging
            --rw              open the database read-write (default: read-only)

      Si tiene disponibles el comando ``zodbbrowser``, tiene correctamente instalada el cliente
      de base de datos nativa ``ZODB`` por linea de comando.

      .. note::

        M√°s informaci√≥n consulte https://pypi.org/project/zodbbrowser/

Ejecute el comando ``zodbrowser`` especificando un nombre de archivo ZODB, ejecutando el siguiente comando:

.. tabs::

   .. group-tab:: Linux

      .. code-block:: console

          zodbbrowser /ruta/al/archivo/Data.fs

   .. group-tab:: Windows

      .. code-block:: console

          zodbbrowser.exe C:\Ruta\al\archivo\Data.fs

El comando anterior muestra el siguiente mensaje:

.. code-block:: console
    :class: no-copy

    Listening on http://localhost:8070/


Abra http://localhost:8070 en un navegador web. Tenga en cuenta que no hay controles
de acceso; todos los dem√°s usuarios de la m√°quina local podr√°n acceder al contenido
de la base de datos.

Al abrir la direcci√≥n anterior deber√≠a mostrar la interfaz gr√°fica de ``zodbbrowser``, como se muestra
a continuaci√≥n:

.. figure:: ../_static/images/zodbbrowser.png
    :align: center
    :width: 70%

    ZODB browser

Si muestra la interfaz gr√°fica de ``zodbbrowser``, tiene correctamente instalada el cliente
de base de datos ``ZODB``.


----


.. _python_zodb_conn_strs:

Cadenas de conexi√≥n
-------------------

Para definir el m√©todo ``connect`` debe definir las cadenas de conexi√≥n con
``ZODB`` como se describe a continuaci√≥n:

``DB_PATH``
    Ruta absoluta o relativa del archivo de base de datos ``ZODB``.

``DB_FILE``
    Nombre del archivo de base de datos ``ZODB``.

A continuaci√≥n presento un ejemplo en Python implementando una cadena de conexi√≥n
para una base de datos ``ZODB``:

.. code-block:: python
    :linenos:

    import os
    import persistent
    import transaction
    import ZODB, ZODB.FileStorage
    from pathlib import Path

    DB_PATH = os.path.dirname(os.path.abspath(__file__)) + os.sep + "filestorage/"
    Path(DB_PATH).mkdir(parents=True, exist_ok=True)
    DB_FILE = ZODB.FileStorage.FileStorage(DB_PATH + "Data.fs")
    DB = ZODB.DB(DB_FILE)

    connection = DB.open()


El ejemplo anterior se describe a continuaci√≥n:

- En la linea 1, se importa la librer√≠a ``os`` de la librer√≠a est√°ndar Python.

- En la linea 2, se importa la librer√≠a ``ZODB`` de la librer√≠a est√°ndar Python.

- En la linea 4, se define en la constante ``DB_PATH`` la ruta absoluta usada para guardar la base de datos.

- En la linea 5, se define en la constante ``DB_FILE`` el nombre de la base de datos.

- En la linea 6, se define en la constante ``DB`` la ruta completa usada para leer la base de datos.

De esta forma se crea una cadena de conexi√≥n para ``ZODB`` para ser usada por el m√©todo ``open``.


----


Insertar registros
------------------

Si requiere insertar registro en un nodo, a continuaci√≥n tiene un ejemplo:

.. literalinclude:: ../../recursos/leccion2/zodb/crud/classes.py
    :language: python
    :linenos:
    :lines: 1-27

El m√≥dulo :file:`classes.py` anterior, muestra las clases de tipo ``persistent``.

.. literalinclude:: ../../recursos/leccion2/zodb/crud/zodb_record_insert.py
    :language: python
    :linenos:
    :lines: 1-58

El m√≥dulo :file:`zodb_record_insert.py` anterior, muestra el script principal de
ejecuci√≥n del programa.


----


.. important::
    Usted puede descargar el c√≥digo usado en esta secci√≥n haciendo clic en los
    siguientes enlaces:

    - :download:`classes.py <../../recursos/leccion2/zodb/crud/classes.py>`.

    - :download:`zodb_record_insert.py <../../recursos/leccion2/zodb/crud/zodb_record_insert.py>`.


.. tip::
    Para ejecutar el c√≥digo :file:`zodb_record_insert.py`
    abra una consola de comando, acceda al directorio donde se encuentra el programa:

    .. code-block:: pycon
        :class: no-copy

        proyectos/
        ‚îî‚îÄ‚îÄ zodb/
            ‚îú‚îÄ‚îÄ classes.py
            ‚îî‚îÄ‚îÄ zodb_record_insert.py

    Si tiene la estructura de archivo previa, entonces ejecute el siguiente comando:

    .. code-block:: console

        python3 zodb_record_insert.py

El anterior c√≥digo al ejecutar debe mostrar el siguiente mensaje:

.. code-block:: console

    INFO:root:‚úÖ ¬°Conectado a la base de datos 'Data.fs!'

    INFO:root:‚úÖ ¬°Fueron insertado(s) los registro(s) correctamente en la ZODB!

    INFO:root:‚úÖ ¬°La conexi√≥n ZODB a la base de datos 'Data.fs' fue cerrada!


----


Consultar registros
-------------------

Si requiere consultar registros de un nodo, a continuaci√≥n tiene un ejemplo:

.. literalinclude:: ../../recursos/leccion2/zodb/crud/classes.py
    :language: python
    :linenos:
    :lines: 1-27

El m√≥dulo :file:`classes.py` anterior, muestra las clases de tipo ``persistent``.

.. literalinclude:: ../../recursos/leccion2/zodb/crud/zodb_record_read.py
    :language: python
    :linenos:
    :lines: 1-55

El m√≥dulo :file:`zodb_record_read.py` anterior, muestra el script principal de
ejecuci√≥n del programa.


----


.. important::
    Usted puede descargar el c√≥digo usado en esta secci√≥n haciendo clic en los
    siguientes enlaces:

    - :download:`classes.py <../../recursos/leccion2/zodb/crud/classes.py>`.

    - :download:`zodb_record_read.py <../../recursos/leccion2/zodb/crud/zodb_record_read.py>`.


.. tip::
    Para ejecutar el c√≥digo :file:`zodb_record_read.py`
    abra una consola de comando, acceda al directorio donde se encuentra el programa:

    .. code-block:: pycon
        :class: no-copy

        proyectos/
        ‚îî‚îÄ‚îÄ zodb/
            ‚îú‚îÄ‚îÄ classes.py
            ‚îî‚îÄ‚îÄ zodb_record_read.py

    Si tiene la estructura de archivo previa, entonces ejecute el siguiente comando:

    .. code-block:: console

        python3 zodb_record_read.py

El anterior c√≥digo al ejecutar debe mostrar el siguiente mensaje:

.. code-block:: console

    INFO:root:‚úÖ ¬°Conectado a la base de datos 'Data.fs!'

    üìú Lista de registros:
    'producto1', Valor: (Producto) Id: 1, Descripci√≥n: Carro.
    'producto2', Valor: (Producto) Id: 2, Descripci√≥n: Moto.
    'producto3', Valor: (Producto) Id: 3, Descripci√≥n: Bicicleta.
    'productos', Valor: [<Producto:(id=1, descripcion='Carro')>, <Producto:(id=2, descripcion='Moto')>, <Producto:(id=3, descripcion='Bicicleta')>]

    üìú Detalles del nodo 'producto1':
    Nodo: (Producto) Id: 1, Descripci√≥n: Carro.

    INFO:root:‚úÖ ¬°La conexi√≥n ZODB a la base de datos 'Data.fs' fue cerrada!


----


Actualizar registros
--------------------

Si requiere actualizar un nodo, a continuaci√≥n tiene un ejemplo:

.. literalinclude:: ../../recursos/leccion2/zodb/crud/classes.py
    :language: python
    :linenos:
    :lines: 1-27

El m√≥dulo :file:`classes.py` anterior, muestra las clases de tipo ``persistent``.

.. literalinclude:: ../../recursos/leccion2/zodb/crud/zodb_record_update.py
    :language: python
    :linenos:
    :lines: 1-60

El m√≥dulo :file:`zodb_record_update.py` anterior, muestra el script principal de
ejecuci√≥n del programa.


----


.. important::
    Usted puede descargar el c√≥digo usado en esta secci√≥n haciendo clic en los
    siguientes enlaces:

    - :download:`classes.py <../../recursos/leccion2/zodb/crud/classes.py>`.

    - :download:`zodb_record_update.py <../../recursos/leccion2/zodb/crud/zodb_record_update.py>`.


.. tip::
    Para ejecutar el c√≥digo :file:`zodb_record_update.py`
    abra una consola de comando, acceda al directorio donde se encuentra el programa:

    .. code-block:: pycon
        :class: no-copy

        proyectos/
        ‚îî‚îÄ‚îÄ zodb/
            ‚îú‚îÄ‚îÄ classes.py
            ‚îî‚îÄ‚îÄ zodb_record_update.py

    Si tiene la estructura de archivo previa, entonces ejecute el siguiente comando:

    .. code-block:: console

        python3 zodb_record_update.py

El anterior c√≥digo al ejecutar debe mostrar el siguiente mensaje:

.. code-block:: console

    INFO:root:‚úÖ ¬°Conectado a la base de datos 'Data.fs!'

    (Producto) Id: 1, Descripci√≥n: Carro.
            Descripci√≥n nueva: Vehiculo
    (Producto) Id: 2, Descripci√≥n: Moto.
            Descripci√≥n nueva: Motocicleta
    (Producto) Id: 3, Descripci√≥n: Bicicleta.
            Descripci√≥n nueva: Bici

    INFO:root:‚úÖ ¬°Fueron actualizados los nodos correctamente!
    INFO:root:‚úÖ ¬°La conexi√≥n ZODB a la base de datos 'Data.fs' fue cerrada!


----


Eliminar registros
------------------

Si requiere eliminar un nodo, a continuaci√≥n tiene un ejemplo:

.. literalinclude:: ../../recursos/leccion2/zodb/crud/classes.py
    :language: python
    :linenos:
    :lines: 1-27

El m√≥dulo :file:`classes.py` anterior, muestra las clases de tipo ``persistent``.

.. literalinclude:: ../../recursos/leccion2/zodb/crud/zodb_record_delete.py
    :language: python
    :linenos:
    :lines: 1-54

El m√≥dulo :file:`zodb_record_delete.py` anterior, muestra el script principal de
ejecuci√≥n del programa.


----


.. important::
    Usted puede descargar el c√≥digo usado en esta secci√≥n haciendo clic en los
    siguientes enlaces:

    - :download:`classes.py <../../recursos/leccion2/zodb/crud/classes.py>`.

    - :download:`zodb_record_delete.py <../../recursos/leccion2/zodb/crud/zodb_record_delete.py>`.


.. tip::
    Para ejecutar el c√≥digo :file:`zodb_record_delete.py`
    abra una consola de comando, acceda al directorio donde se encuentra el programa:

    .. code-block:: pycon
        :class: no-copy

        proyectos/
        ‚îî‚îÄ‚îÄ zodb/
            ‚îú‚îÄ‚îÄ classes.py
            ‚îî‚îÄ‚îÄ zodb_record_delete.py

    Si tiene la estructura de archivo previa, entonces ejecute el siguiente comando:

    .. code-block:: console

        python3 zodb_record_delete.py

El anterior c√≥digo al ejecutar debe mostrar el siguiente mensaje:

.. code-block:: console

    INFO:root:‚úÖ ¬°Conectado a la base de datos 'Data.fs!'

    üìú Descripci√≥n del nodo: Vehiculo

    INFO:root:‚úÖ ¬°Registro eliminado correctamente!
    INFO:root:‚úÖ ¬°La conexi√≥n ZODB a la base de datos 'Data.fs' fue cerrada!

Asi de esta forma puede ingresar, consultar, actualizar y eliminar
registro en una tabla en una base de datos ``ZODB``.


----


.. _python_zodb_scaffolding:

Pr√°ctica - Caso real
--------------------

A continuaci√≥n se presenta una pr√°ctica m√°s real de implementar el uso de proyectos
con ``ZODB``, a continuaci√≥n la estructura de proyecto llamado ``sistema``:

.. code-block:: console

    zodb/
    ‚îî‚îÄ‚îÄ sistema/
        ‚îú‚îÄ‚îÄ classes/
        ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
        ‚îÇ   ‚îú‚îÄ‚îÄ cliente.py
        ‚îÇ   ‚îî‚îÄ‚îÄ producto.py
        ‚îú‚îÄ‚îÄ __init__.py
        ‚îú‚îÄ‚îÄ main.py
        ‚îú‚îÄ‚îÄ requirements.txt
        ‚îî‚îÄ‚îÄ settings.py


A continuaci√≥n se presenta y explica el uso de cada archivo para este proyecto:

*Archivo* :file:`producto.py`

M√≥dulo :file:`producto.py`, muestra la clases de tipo ``persistent``.

.. literalinclude:: ../../recursos/leccion2/zodb/sistema/classes/producto.py
    :language: python
    :linenos:
    :lines: 1-27

*Archivo* :file:`main.py`

M√≥dulo de principal del programa.

.. literalinclude:: ../../recursos/leccion2/zodb/sistema/main.py
    :language: python
    :linenos:
    :lines: 1-151

*Archivo* :file:`settings.py`

M√≥dulo de configuraciones del programa.

.. literalinclude:: ../../recursos/leccion2/zodb/sistema/settings.py
    :language: python
    :linenos:
    :lines: 1-27

*Archivo* :file:`inventario.fs`

Archivo de base de datos de :ref:`ZODB <python_modulo_zodb>` llamado :file:`inventario.fs`
la cual no se incluye ya que cada vez que se inicia el programa :file:`main.py` se elimina y crea
nuevamente, para cuidar la creaci√≥n de los datos iniciales.

*Archivo* :file:`requirements.txt`

Archivo de `requirements.txt`_ de la herramienta de gesti√≥n de paquetes `pip`_.

.. literalinclude:: ../../recursos/leccion2/zodb/sistema/requirements.txt
    :language: python
    :linenos:
    :lines: 1-12

Teniendo creada la anterior estructura de proyecto, vuelva a ejecutar ahora el M√≥dulo con
el siguiente comando, el cual a continuaci√≥n se presentan el correspondiente comando de tu
sistema operativo:

.. tabs::

   .. group-tab:: Linux

      Antes de ejecutar debes instalar sus dependencias, con el siguiente comando:

      .. code-block:: console

          pip3 install -r requirements.txt

      .. tip::
        Para ejecutar el c√≥digo fuente de esta practica debe invocar al M√≥dulo :file:`main.py`,
        abra una consola de comando, acceda al directorio donde se encuentra la estructura previa
        y ejecute el siguiente comando:

      .. code-block:: console

          python3 main.py

      El anterior c√≥digo al ejecutar debe mostrar el siguiente mensaje:

      .. code-block:: console

          INFO:root:‚úÖ ¬°Conectado a la base de datos 'inventario.fs!'

          INFO:root:‚úÖ ¬°Fueron insertado(s) 3 registro(s) correctamente en la ZODB!

          üìú Lista de registros:

          Producto 1:
              ID: 1
              Descripci√≥n: Carro
          Producto 2:
              ID: 2
              Descripci√≥n: Bici
          Producto 3:
              ID: 3
              Descripci√≥n: Motocicleta

          üìú Total de producto(s) en Inventario: 3.

          INFO:root:‚úÖ ¬°Fueron consultados 3 registro(s) correctamente en la ZODB!

          üìú El producto 'Carro' fue actualizado con 'Vehiculo'.

          üìú El producto 'Bici' fue actualizado con 'Bicicleta'.

          INFO:root:‚úÖ ¬°Fueron actualizados 2 registro(s) correctamente en la ZODB!

          üìú El producto 'Bicicleta' fue eliminado correctamente.

          üìú El producto 'Vehiculo' fue eliminado correctamente.

          INFO:root:‚úÖ ¬°Fueron eliminados 2 registro(s) correctamente en la ZODB!

          INFO:root:‚úÖ ¬°La conexi√≥n ZODB a la base de datos 'inventario.fs' fue cerrada!

      La ejecucion anterior generar la siguiente estructura:

      .. code-block:: console

          zodb/
          ‚îî‚îÄ‚îÄ sistema/
              ‚îú‚îÄ‚îÄ classes/
              ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
              ‚îÇ   ‚îú‚îÄ‚îÄ cliente.py
              ‚îÇ   ‚îî‚îÄ‚îÄ producto.py
              ‚îú‚îÄ‚îÄ filestorage/
              ‚îÇ   ‚îú‚îÄ‚îÄ inventario.fs
              ‚îÇ   ‚îú‚îÄ‚îÄ inventario.fs.index
              ‚îÇ   ‚îú‚îÄ‚îÄ inventario.fs.lock
              ‚îÇ   ‚îî‚îÄ‚îÄ inventario.fs.tmp
              ‚îú‚îÄ‚îÄ __init__.py
              ‚îú‚îÄ‚îÄ main.py
              ‚îú‚îÄ‚îÄ requirements.txt
              ‚îî‚îÄ‚îÄ settings.py

   .. group-tab:: Windows

      Antes de ejecutar debes instalar sus dependencias, con el siguiente comando:

      .. code-block:: console

          pip3 install -r requirements.txt

      .. tip::
        Para ejecutar el c√≥digo fuente de esta practica debe invocar al M√≥dulo :file:`main.py`,
        abra una consola de comando, acceda al directorio donde se encuentra la estructura previa
        y ejecute el siguiente comando:

      .. code-block:: console

          python3 main.py

      El anterior c√≥digo al ejecutar debe mostrar el siguiente mensaje:

      .. code-block:: console

          INFO:root:‚úÖ ¬°Conectado a la base de datos 'inventario.fs!'

          INFO:root:‚úÖ ¬°Fueron insertado(s) 3 registro(s) correctamente en la ZODB!

          üìú Lista de registros:

          Producto 1:
              ID: 1
              Descripci√≥n: Carro
          Producto 2:
              ID: 2
              Descripci√≥n: Bici
          Producto 3:
              ID: 3
              Descripci√≥n: Motocicleta

          üìú Total de producto(s) en Inventario: 3.

          INFO:root:‚úÖ ¬°Fueron consultados 3 registro(s) correctamente en la ZODB!

          üìú El producto 'Carro' fue actualizado con 'Vehiculo'.

          üìú El producto 'Bici' fue actualizado con 'Bicicleta'.

          INFO:root:‚úÖ ¬°Fueron actualizados 2 registro(s) correctamente en la ZODB!

      La ejecucion anterior generar la siguiente estructura:

      .. code-block:: console

          zodb/
          ‚îî‚îÄ‚îÄ sistema/
              ‚îú‚îÄ‚îÄ classes/
              ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
              ‚îÇ   ‚îú‚îÄ‚îÄ cliente.py
              ‚îÇ   ‚îî‚îÄ‚îÄ producto.py
              ‚îú‚îÄ‚îÄ filestorage/
              ‚îÇ   ‚îú‚îÄ‚îÄ inventario.fs
              ‚îÇ   ‚îú‚îÄ‚îÄ inventario.fs.index
              ‚îÇ   ‚îú‚îÄ‚îÄ inventario.fs.lock
              ‚îÇ   ‚îî‚îÄ‚îÄ inventario.fs.tmp
              ‚îú‚îÄ‚îÄ __init__.py
              ‚îú‚îÄ‚îÄ main.py
              ‚îú‚îÄ‚îÄ requirements.txt
              ‚îî‚îÄ‚îÄ settings.py

Asi de esta forma puede ingresar, consultar, actualizar y eliminar
registro en un archivo serializado de objetos python ``ZODB``.


----


.. seealso::

    Consulte la secci√≥n de :ref:`lecturas suplementarias <lecturas_extras_leccion2>`
    del entrenamiento para ampliar su conocimiento en esta tem√°tica.


.. raw:: html
   :file: ../_templates/partials/soporte_profesional.html


..
  .. disqus::

.. _`ZODB`: https://zodb.org/en/latest/
.. _`requirements.txt`: https://pip.pypa.io/en/stable/reference/requirements-file-format/
.. _`ZEO`: https://pypi.org/project/ZEO/
.. _`pip`: https://pip.pypa.io/en/stable/
