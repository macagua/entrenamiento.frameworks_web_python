.. _python_modulo_zodb:

ZODB
=====

`ZODB`_ ofrece una base de datos orientada a objetos para Python que proporciona un alto grado de transparencia.

- ‚úÖ No hay lenguaje separado para las operaciones de base de datos

- ‚úÖ Muy poco impacto en su c√≥digo para hacer objetos persistentes

- ‚úÖ Ning√∫n mapeador de base de datos que oculte parcialmente la base de datos.

- ‚úÖ Utilizar un mapeo objeto-relacional no es como utilizar una base de datos orientada a objetos.

- ‚úÖ Casi ninguna costura entre el c√≥digo y la base de datos.

- ‚úÖ Las relaciones entre objetos se gestionan de forma muy natural, lo que permite crear grafos de objetos complejos sin uniones.

``ZODB`` es una base de datos transaccional ACID.

``ZODB`` funciona con Python 3.7 y versiones superiores. Tambi√©n funciona con PyPy.


üìå **Ventajas de ZODB**:

- ‚úÖ F√°cil de usar, sin necesidad de instalar bases de datos.

- ‚úÖ √ötil para almacenar estructuras de datos complejas (listas, diccionarios, objetos).

üìå **Desventajas**:

- ‚ùå No es ideal para grandes vol√∫menes de datos.

- ‚ùå No permite consultas avanzadas como SQL.


----


¬øQu√© es la ZODB?
-----------------

``ZODB`` es un sistema de persistencia para objetos Python.  Los lenguajes de programaci√≥n
que escriben objetos autom√°ticamente en el disco y los vuelven a leer cuando son requeridos
por un programa en ejecuci√≥n.  Al instalar el ``ZODB``, a√±ades estas facilidades a Python.

Es ciertamente posible construir tu propio sistema para hacer persistentes los objetos Python.
Los puntos de partida habituales son el m√≥dulo :mod:`pickle`, para convertir objetos en una
representaci√≥n de cadena, y varios m√≥dulos de bases de datos, como los m√≥dulos :mod:`gdbm` o
:mod:`bsddb`, que proporcionan formas de escribir cadenas en el disco y leerlas de vuelta.
Es sencillo combinar el m√≥dulo :mod:`pickle` y un m√≥dulo de base de datos para almacenar y
recuperar objetos, y de hecho el m√≥dulo :mod:`shelve`, incluido en la biblioteca est√°ndar
de Python, lo hace.

El inconveniente es que el programador tiene que gestionar expl√≠citamente los objetos, leyendo
un objeto cuando se necesita y escribi√©ndolo en el disco cuando el objeto ya no es necesario.
La ZODB gestiona los objetos por ti, manteni√©ndolos en una cach√©, escribi√©ndolos en disco cuando
se modifican y elimin√°ndolos de la cach√© si no se han utilizado durante un tiempo.


----


OODBs vs. BD relacionales
^^^^^^^^^^^^^^^^^^^^^^^^^

Otra forma de verlo es que ZODB es una base de datos orientada a objetos (OODB) espec√≠fica
de Python. Las bases de datos de objetos comerciales para C++ o Java a menudo exigen pasar
por el aro, como utilizar un preprocesador especial o evitar determinados tipos de datos.
Como veremos, el ZODB tiene que pasar por algunos obst√°culos, pero en comparaci√≥n, la
naturalidad del ZODB es asombrosa.

Las bases de datos relacionales (RDB) son mucho m√°s comunes que las OODB. Las bases de
datos relacionales almacenan la informaci√≥n en tablas; una tabla consta de cualquier
n√∫mero de filas, cada una de las cuales contiene varias columnas de informaci√≥n. (Las
filas se denominan m√°s formalmente relaciones, de donde procede el t√©rmino "base de
datos relacional").

Veamos un ejemplo concreto. El ejemplo procede de mi trabajo diario en la Bolsa de MEMS,
en una versi√≥n muy simplificada. El trabajo consiste en hacer un seguimiento de los procesos,
que son listas de pasos de fabricaci√≥n que deben realizarse en una f√°brica de semiconductores.
Una ejecuci√≥n pertenece a un usuario concreto, y tiene un nombre y un n√∫mero de identificaci√≥n
asignados. Las ejecuciones constan de una serie de operaciones; una operaci√≥n es un √∫nico paso
a realizar, como depositar algo en una oblea o grabar algo en ella.

Las operaciones pueden tener par√°metros, que son informaci√≥n adicional necesaria para realizar
una operaci√≥n. Por ejemplo, si vas a depositar algo en una oblea, necesitas saber dos cosas:
1) qu√© est√°s depositando, y 2) cu√°nto debe depositarse. Puede depositar 100 micras de √≥xido
2) de silicio o 1 micra de cobre.

El traslado de estas estructuras a una base de datos relacional es sencillo:

::

   CREATE TABLE runs (
     int      run_id,
     varchar  owner,
     varchar  title,
     int      acct_num,
     primary key(run_id)
   );

   CREATE TABLE operations (
     int      run_id,
     int      step_num,
     varchar  process_id,
     PRIMARY KEY(run_id, step_num),
     FOREIGN KEY(run_id) REFERENCES runs(run_id),
   );

   CREATE TABLE parameters (
     int      run_id,
     int      step_num,
     varchar  param_name,
     varchar  param_value,
     PRIMARY KEY(run_id, step_num, param_name)
     FOREIGN KEY(run_id, step_num)
        REFERENCES operations(run_id, step_num),
   );

En Python, escribir√≠a tres clases llamadas :class:`Run`, :class:`Operation`, y :class:`Parameter`.
No presentar√© c√≥digo para definir estas clases, ya que ese c√≥digo carece de inter√©s en este momento.
Cada clase contendr√≠a un √∫nico m√©todo para empezar, un m√©todo :meth:`__init__` que asigna valores
por defecto, como 0 o ``None``, a cada atributo de la clase.

No es dif√≠cil escribir c√≥digo Python que cree una instancia :class:`Run` y la rellene con los datos
de las tablas relacionales; con un poco m√°s de esfuerzo, se puede construir una herramienta sencilla,
normalmente llamada mapeador objeto-relacional, para hacerlo autom√°ticamente.

(V√©ase `<https://legacy.python.org/workshops/1997-10/proceedings/shprentz.html>`_
para la implementaci√≥n m√°s exitosa de Joel Shprentz, el sistema de Shprentz se ha utilizado para trabajo real).

Sin embargo, es dif√≠cil hacer que un mapeador objeto-relacional sea razonablemente r√°pido; una
implementaci√≥n simplona como la m√≠a es bastante lenta porque tiene que hacer varias consultas
para acceder a todos los datos de un objeto. Los mapeadores objeto-relacionales de mayor
rendimiento almacenan en cach√© los objetos para mejorar el rendimiento, y s√≥lo realizan
consultas SQL cuando realmente lo necesitan.

Eso ayuda si quieres acceder al n√∫mero de ejecuci√≥n 123 de repente. Pero, ¬øqu√© ocurre si desea
encontrar todas las ejecuciones en las que un paso tiene un par√°metro denominado "grosor" con
un valor de 2.0?  En la versi√≥n relacional, tiene dos opciones poco atractivas:

#. Escriba una consulta SQL especializada para este caso: ``SELECT run_id FROM operations
   WHERE param_name = 'thickness' AND param_value = 2.0``

   Si este tipo de consultas son habituales, puede acabar teniendo muchas consultas especializadas.
   Cuando se reorganicen las tablas de la base de datos, habr√° que modificar todas estas consultas.

#. Un mapeador objeto-relacional no ayuda mucho. Escanear a trav√©s de las ejecuciones significa que
   el mapeador realizar√° las consultas SQL necesarias para leer la ejecuci√≥n n¬∫ 1, y luego un simple
   bucle de Python puede comprobar si alguno de sus pasos tiene el par√°metro que est√°s buscando.
   Repite para la carrera #2, 3, y as√≠ sucesivamente. Esto hace un gran n√∫mero de consultas SQL, y
   por lo tanto es incre√≠blemente lento.

Una base de datos de objetos como ZODB simplemente almacena punteros internos de objeto a objeto, por
lo que leer un solo objeto es mucho m√°s r√°pido que hacer un mont√≥n de consultas SQL y ensamblar los
resultados. Por lo tanto, escanear todas las ejecuciones sigue siendo ineficiente, pero no extremadamente
ineficiente.


----


.. _python_zodb_instalar:

Instalaci√≥n
-----------

Para conectarte a una ``ZODB`` necesita el paquete `ZODB`_. Esto
significa que debe instalar ``ZODB`` ejecutando el siguiente comando, el cual
a continuaci√≥n se presentan el correspondiente comando de tu sistema operativo:

.. tabs::

   .. group-tab:: Linux

      .. code-block:: console

          $ pip3 install ZODB==6.0

   .. group-tab:: Windows

      .. code-block:: console

          > pip3 install ZODB==6.0

Puede probar si la instalaci√≥n se realizo correctamente, ejecutando
el siguiente comando correspondiente a tu sistema operativo:

.. tabs::

   .. group-tab:: Linux

      .. code-block:: console

          $ pip3 freeze | grep "ZODB"

   .. group-tab:: Windows

      .. code-block:: console

          > pip3 freeze | grep "ZODB"


Si muestra el numero de la versi√≥n instalada de ``ZODB``, tiene correctamente instalada
la paquete. Con esto, ya tiene todo listo para continuar.


----


Pr√°ctica - Caso real
--------------------

A continuaci√≥n se presenta una pr√°ctica m√°s real de implementar el uso de proyectos
con ``ZODB`` para operaciones CRUD en un archivo de registros serializados:

.. literalinclude:: ../../recursos/leccion2/zodb/main.py
    :language: python
    :linenos:
    :lines: 1-96

.. important::
    Usted puede descargar el c√≥digo usado en esta secci√≥n haciendo clic en el
    siguiente enlace: :download:`main.py <../../recursos/leccion2/zodb/main.py>`.


.. tip::
    Para ejecutar el c√≥digo :file:`main.py`, abra una consola de comando,
    acceda al directorio donde se encuentra el programa:

    ::

        zodb/
        ‚îú‚îÄ‚îÄ filestorage/
        ‚îî‚îÄ‚îÄ main.py

    Si tiene la estructura de archivo previa, entonces ejecute el siguiente comando:

    .. code-block:: console

        $ python3 main.py


    La salida esperada ser√° similar a la siguiente:

    ::

        ‚úÖ ¬°La conexi√≥n ZODB a la base de datos 'data.fs' fue establecida!

        ‚úÖ Cliente 'Leonardo Caballero' creado con √©xito.
        ‚úÖ Cliente 'Ana Poleo' creado con √©xito.
        ‚úÖ Cliente 'Manuel Matos' creado con √©xito.

        üìú Lista de Clientes:
        ID: 1, Nombre: Leonardo, Apellido: Caballero, C√≥digo postal: 5001, Tel√©fono: +58-412-4734567
        ID: 2, Nombre: Ana, Apellido: Poleo, C√≥digo postal: 6302, Tel√©fono: +58-426-5831297
        ID: 3, Nombre: Manuel, Apellido: Matos, C√≥digo postal: 4001, Tel√©fono: +58-414-2360943
        ‚úÖ Cliente con ID: '1' actualizado con √©xito.

        üìú Lista de Clientes:
        ID: 1, Nombre: Leonardo, Apellido: Caballero, C√≥digo postal: 5001, Tel√©fono: +58-416-5831297
        ID: 2, Nombre: Ana, Apellido: Poleo, C√≥digo postal: 6302, Tel√©fono: +58-426-5831297
        ID: 3, Nombre: Manuel, Apellido: Matos, C√≥digo postal: 4001, Tel√©fono: +58-414-2360943
        ‚úÖ Cliente con ID: '3' eliminado con √©xito.

        üìú Lista de Clientes:
        ID: 1, Nombre: Leonardo, Apellido: Caballero, C√≥digo postal: 5001, Tel√©fono: +58-416-5831297
        ID: 2, Nombre: Ana, Apellido: Poleo, C√≥digo postal: 6302, Tel√©fono: +58-426-5831297

        ‚úÖ ¬°La conexi√≥n ZODB a la base de datos 'data.fs' fue cerrada!
        ‚úÖ ¬°La base de datos ZODB 'data.fs' fue cerrada!


    La estructura de directorio debe ser similar a la siguiente:

    ::

        zodb/
        ‚îú‚îÄ‚îÄ filestorage/
        ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ data.fs
        ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ data.fs.index
        ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ data.fs.lock
        ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ data.fs.tmp
        ‚îî‚îÄ‚îÄ main.py

.. tip::
    En lugar de una base de datos real, usaremos un archivo ``data.fs`` para almacenar los
    datos en una lista de diccionarios.

Asi de esta forma puede ingresar, consultar, actualizar y eliminar
registro en un archivo serializado de objetos python ``ZODB``.


----

.. seealso::

    Consulte la secci√≥n de :ref:`lecturas suplementarias <lectura_extras_leccion2>`

.. _`ZODB`: https://zodb-docs.readthedocs.io/en/latest/
